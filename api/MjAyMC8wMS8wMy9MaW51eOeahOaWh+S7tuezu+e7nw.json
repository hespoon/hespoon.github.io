{"title":"Linux的文件系统","date":"2020-01-03T10:59:37.000Z","date_formatted":{"ll":"Jan 3, 2020","L":"01/03/2020","MM-DD":"01-03"},"link":"2020/01/03/Linux的文件系统","updated":"2020-01-03T11:52:59.175Z","content":"<p>Linux 中打开文件表分两种，两者之间个有分工，合力对文件操作提供必要的数据支持。</p>\n<ul>\n<li>系统打开文件表<br>系统打开文件表记录系统已打开的文件，主要用于文件的读写操作。整个系统运行期间只维护一张系统打开文件表。系统打开文件表中的每一个条目对应一个已经打开的文件。该条目称为打开文件句柄。一个打开文件句柄存储了与被打开文件有关的全部信息。内容包含了此文件的 inode、操作函数、打开模式、引用计数等，以及其所在的 vfsmnt 结构和 dentry 结构的指针。</li>\n<li>进程打开文件表<br>对于每个进程而言，其 PCB 中包含一个 files_struct 结构，称为进程打开文件表。进程打开文件表结构是和单个进程所打开的文件一一对应的。进程打开文件表的表项包含两部分，分别是1. 控制文件描述符操作的一组标志 </li>\n</ul>\n<ol start=\"2\">\n<li>指向系统打开文件表中打开文件句柄的指针<br>相同的文件可以被不同的进程打开也可以在同一个进程中被打开多次。</li>\n</ol>\n<ul>\n<li>总结<ol>\n<li>由于进程级打开文件表的存在，不同的进程中会出现相同的文件描述符，它们可能指向同一个文件，也可能指向不同的文件。</li>\n<li>两个不同的文件描述符，若指向同一个打开文件句柄，将共享同一文件偏移量。因此，如果通过其中一个文件描述符来修改文件偏移量，那么从另一个描述符中也会观察到变化。无论这两个文件描述符是否属于不同进程，还是同一个进程，情况都是如此。</li>\n<li>文件描述符标志为进程和文件描述符所私有。对这一标志的修改将不会影响统一进程或不同进程中的其他文件描述符。</li>\n</ol>\n</li>\n</ul>\n","prev":{"title":"微信小程序开发","link":"2020/01/04/微信小程序开发"},"next":{"title":"KMP 算法","link":"2019/12/19/KMP-算法"},"plink":"http://hespoon.github.io/2020/01/03/Linux的文件系统/","copyright":{"author":"John Doe","link":"<a href=\"http://hespoon.github.io/2020/01/03/Linux的文件系统/\" title=\"Linux的文件系统\">http://hespoon.github.io/2020/01/03/Linux的文件系统/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}