{"title":"Manacher 算法","date":"2020-02-14T09:21:49.000Z","date_formatted":{"ll":"Feb 14, 2020","L":"02/14/2020","MM-DD":"02-14"},"link":"2020/02/14/Manacher-算法","updated":"2020-02-17T07:50:50.733Z","content":"<html><head></head><body><p>[TOC]</p>\n<h1 id=\"功能\"><a class=\"markdownIt-Anchor\" href=\"2020/02/14/Manacher-算法#功能\"></a> 功能</h1>\n<p>查找一个字符串的最长回文子串的线性算法</p>\n<h1 id=\"算法原理与实现\"><a class=\"markdownIt-Anchor\" href=\"2020/02/14/Manacher-算法#算法原理与实现\"></a> 算法原理与实现</h1>\n<ol>\n<li>\n<p>将长度为奇数和偶数的回文串一起处理</p>\n<p>Manacher 使用一种巧妙地办法，将长度为奇数的回文串和长度为偶数的回文串一起考虑。具体做法是，在原字符串的每个相邻字符中间插入一个分隔符，同时在首尾也要各添加一个分隔符。要求分隔符不在原字符串中出现。如下图所示，其中，原始字符串为 S，转换后的字符串为 T：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006XJF4Oly1gbxczgeenuj34a10x3jvu.jpg\" alt class=\"article-img\"></p>\n</li>\n<li>\n<p>使用额外空间存储必要信息 Len 数组</p>\n<p>辅助数组 Len 是算法的核心。</p>\n<p>Len[i] 表示以字符 T[i] 为中心的最长回文子串的最右端字符到字符 T[i] 的字符个数。</p>\n<p>比如，以 T[i] 为中心的最长回文子串是 T[l,r]，则 Len[i] = r - i + 1。</p>\n<p>对于上面的例子，可以得出如下的 Len 数组：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006XJF4Oly1gbxdeb6mxqj33uo0shjvo.jpg\" alt class=\"article-img\"></p>\n<p>Len 数组的性质：Len[i] - 1 等于该回文子串在原字符 S 中的长度。</p>\n<p>证明如下：首先，在转换得到的字符串 T 中，所有的回文串的长度都为奇数。那么，对于以字符 T[i] 为中心的最长回文子串，其长度就是 2 × Len[i] -1。经过观察可知，T 中的所有回文子串，其中分隔符的数量一定比其他字符的数量多一。所以， 2 × Len[i] -1 的长度中，有 Len[i] 个分隔符，剩下 Len[i] - 1 个字符来自原字符串。综上所述，该回文串在原字符串中的长度为 Len[i] - 1。</p>\n</li>\n<li>\n<p>Len 数组的计算</p>\n<p>从左向右依次计算 Len 数组。当计算 Len[i] 时，Len[0] ~ Len[i-1] 已经计算完毕。</p>\n<p>设 P 为之前计算中最长回文子串的右端点的最大值。并且，设取得这个最大值的位置为 Po。</p>\n<p>分为两种情况计算：</p>\n<ol>\n<li>\n<p>i < P</p>\n<p>找到 i 相对于 Po 的对称位置，设为 j。再分为三种情况。</p>\n<ul>\n<li>\n<p>Len[j] < P - i + 1 如下图所示：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006XJF4Oly1gbxdx60uxbj34r827w0ys.jpg\" alt class=\"article-img\"></p>\n<p>此时说明，以 j 为中心的回文串一定在以 Po 为中心的回文串的内部。j 和 i 关于位置 Po 对称，并且，由回文串的定义可知，一个回文串反过来还是一个回文串。所以，以 i 为中心的回文串的长度至少和以 j 为中心的回文串的长度一样长，即 Len[i] ≥ Len[j]。由对称性可知，Len[i] = Len[j]。</p>\n</li>\n<li>\n<p>Len[j] > P - i + 1 如下图所示：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006XJF4Oly1gbxe6lr6amj34r827wwki.jpg\" alt class=\"article-img\"></p>\n<p>此时，Len[i] = P - i + 1</p>\n<p>证明如下：由图可知，Len[i] ≥ P - i + 1。</p>\n<p>假设 Len[i] > P - i + 1，则 Len[Po] > P - Po +1，即以 Po 为中心的回文子串是可以更长的，这与 Len[Po] 的原值不符，所以假设错误。</p>\n<p>综上所述，Len[i] = P - i + 1</p>\n</li>\n<li>\n<p>Len[j] = P - i + 1 如下图所示：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006XJF4Oly1gbxgfvlv0pj30h2083wed.jpg\" alt class=\"article-img\"></p>\n<p>此时，以 i 为中心的回文串可能会延伸到 P 之外，对于大于 P 的部分，我们还未匹配。因此，要从 P + 1 开始一个一个的匹配，直到发生失配，得出 Len[i] 的值。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>i >= P 如下图所示：<br>\n<img src=\"http://ww1.sinaimg.cn/large/006XJF4Oly1gbzf37mcc7j348t1g1wgo.jpg\" alt><br>\n<img src=\"http://ww1.sinaimg.cn/large/006XJF4Oly1gbzfxdznfuj30hl07mglf.jpg\" alt><br>\n这两种情况下，对于中点为 i 的回文串还一点都没有匹配。因此，只能一个一个的匹配得出 Len[i] 的值。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>时间复杂度分析</p>\n<p>该算法只有在遇到没有匹配的位置时才进行匹配，已经匹配过的位置不再匹配。因此，对于字符串 T 中的每一个位置，只进行一次匹配，算法整体复杂度为 O(n)，其中 n 为字符串 T 的长度。由于 T 的长度实际上是原字符串 S 的长度的两倍，所以时间复杂度依旧是线性的。</p>\n</li>\n<li>\n<p>算法实现</p>\n<figure class=\"highlight\"><div><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回字符串 s 中的任意一个最长回文子串 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>{</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(s.length()<=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">     <span class=\"comment\">// 初始化辅助字符串</span></span><br><span class=\"line\">     <span class=\"built_in\">string</span> T=<span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i<s.length();i++){</span><br><span class=\"line\">         T+=s.substr(i,<span class=\"number\">1</span>)+<span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">     }</span><br><span class=\"line\">     <span class=\"comment\">// 初始化辅助数组</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"built_in\">vector</span><<span class=\"keyword\">int</span>> <span class=\"title\">Len</span><span class=\"params\">(T.length())</span></span>;</span><br><span class=\"line\">     Len[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> aimIndex=<span class=\"number\">0</span>,Po=<span class=\"number\">0</span>,P=<span class=\"number\">0</span>; <span class=\"comment\">// aimIndex 存放最长回文子串的中心字符在 T 中的下标</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i<T.length();i++){</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(i<P){</span><br><span class=\"line\">             <span class=\"keyword\">int</span> j=Po-i+Po;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> threshold=P-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(Len[j]<threshold){</span><br><span class=\"line\">                 Len[i]=Len[j];</span><br><span class=\"line\">             }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Len[j]>threshold){</span><br><span class=\"line\">                 Len[i]=P-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">             }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Len[j]==threshold){</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> left=i-P+i<span class=\"number\">-1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> right=P+<span class=\"number\">1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">while</span>(left>=<span class=\"number\">0</span>&&right<T.length()&&T[left]==T[right]){</span><br><span class=\"line\">                     right++;</span><br><span class=\"line\">                     left--;</span><br><span class=\"line\">                 }</span><br><span class=\"line\">                 Len[i]=right-i;</span><br><span class=\"line\">             }</span><br><span class=\"line\">         }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">             <span class=\"keyword\">int</span> left=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> right=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(left>=<span class=\"number\">0</span>&&right<T.length()&&T[left]==T[right]){</span><br><span class=\"line\">                 right++;</span><br><span class=\"line\">                 left--;</span><br><span class=\"line\">             }</span><br><span class=\"line\">             Len[i]=right-i;</span><br><span class=\"line\">         }</span><br><span class=\"line\">         aimIndex=Len[i]>=Len[aimIndex]?i:aimIndex;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(i+Len[i]<span class=\"number\">-1</span>>P){</span><br><span class=\"line\">             P=i+Len[i]<span class=\"number\">-1</span>;</span><br><span class=\"line\">             Po=i;</span><br><span class=\"line\">         }</span><br><span class=\"line\">     }</span><br><span class=\"line\">     <span class=\"comment\">// 从 T 中提取最长回文子串</span></span><br><span class=\"line\">     <span class=\"built_in\">string</span> ans=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=aimIndex-Len[aimIndex]+<span class=\"number\">1</span>;i<=aimIndex+Len[aimIndex]<span class=\"number\">-1</span>;i++){</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(T[i]!=<span class=\"string\">'#'</span>){</span><br><span class=\"line\">             ans+=T.substr(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">         }</span><br><span class=\"line\">     }</span><br><span class=\"line\">     <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"> }</span><br></pre></td></tr></tbody></table></div></figure>\n</li>\n</ol>\n</body></html>","prev":{"title":"《高性能 MySQL》学习笔记 第四章","link":"2020/02/16/《高性能-MySQL》学习笔记/《高性能-MySQL》学习笔记-第四章"},"next":{"title":"leetcode 刷题经验","link":"2020/02/01/leetcode-刷题经验"},"plink":"http://hespoon.github.io/2020/02/14/Manacher-算法/","toc":[{"title":"","id":"功能","index":"1"},{"title":"","id":"算法原理与实现","index":"2"}],"copyright":{"custom":"my copyright"}}