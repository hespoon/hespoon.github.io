{"title":"leetcode 刷题经验","date":"2020-02-01T08:20:40.000Z","date_formatted":{"ll":"Feb 1, 2020","L":"02/01/2020","MM-DD":"02-01"},"link":"2020/02/01/leetcode-刷题经验","updated":"2020-02-05T13:20:04.184Z","content":"<html><head></head><body><h1 id=\"C-不要用局部静态变量。在多个测试用例的调用过程中，局部静态变量只会被初始化一次，导致测试用例之间的结果相互影响，出现-bug。\"><a href=\"2020/02/01/leetcode-刷题经验#C-不要用局部静态变量。在多个测试用例的调用过程中，局部静态变量只会被初始化一次，导致测试用例之间的结果相互影响，出现-bug。\" class=\"headerlink\" title=\"C++ 不要用局部静态变量。在多个测试用例的调用过程中，局部静态变量只会被初始化一次，导致测试用例之间的结果相互影响，出现 bug。\"></a>C++ 不要用局部静态变量。在多个测试用例的调用过程中，局部静态变量只会被初始化一次，导致测试用例之间的结果相互影响，出现 bug。</h1><h1 id=\"想要所有的递归函数使用同一个变量有三种方法，全局变量，局部静态变量，参数传引用。\"><a href=\"2020/02/01/leetcode-刷题经验#想要所有的递归函数使用同一个变量有三种方法，全局变量，局部静态变量，参数传引用。\" class=\"headerlink\" title=\"想要所有的递归函数使用同一个变量有三种方法，全局变量，局部静态变量，参数传引用。\"></a>想要所有的递归函数使用同一个变量有三种方法，全局变量，局部静态变量，参数传引用。</h1><h1 id=\"string-转-int\"><a href=\"2020/02/01/leetcode-刷题经验#string-转-int\" class=\"headerlink\" title=\"string 转 int\"></a>string 转 int</h1><ol>\n<li>使用 C++ 11 中的全局函数 std::to_string<figure class=\"highlight\"><div><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\"><string></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">long</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">unsigned</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">float</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">double</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_string</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)</span></span>;</span><br></pre></td></tr></tbody></table></div></figure></li>\n<li>使用 sstream 中定义的字符串流对象来实现<figure class=\"highlight\"><div><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ostringstream</span> os; <span class=\"comment\">// 构造一个输出字符串流，流的内容为空</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">12</span>;</span><br><span class=\"line\">os<<i; <span class=\"comment\">// 向输出字符串流中输入 int 型整数 i 的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span><<os.str()<<<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></tbody></table></div></figure>\n<h1 id=\"C-stringstream-使用\"><a href=\"2020/02/01/leetcode-刷题经验#C-stringstream-使用\" class=\"headerlink\" title=\"C++ stringstream 使用\"></a>C++ stringstream 使用</h1>C++ 的输入输出分为三种</li>\n<li>基于控制台的 I/O</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>头文件</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iostream</td>\n<td>istream 从流中读取、ostream 写到流中去、iostream 对流进行读写</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>基于文件的 I/O</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>头文件</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fstream</td>\n<td>ifstream 从文件中读取、ofstream 写到文件中去、fstream 对文件进行读写</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>基于字符串的 I/O</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>头文件</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sstream</td>\n<td>istringstream 从 string 对象中读取、ostringstream 写到 string 对象中去、stringstream 对 string 对象进行读写</td>\n</tr>\n</tbody></table>\n<p>ostringstream、istringstream、stringstream 这三个类包含在 sstream.h 文件中。<br>istringstream 类用于执行 C++ 风格的串流的输入操作。<br>ostringstream 类用于执行 C++ 风格的串流的输出操作。<br>stringstream 类同时支持 C++ 风格的串流的输入输出操作。</p>\n<ul>\n<li>istringstream 类<br>从字符串中提取数据，支持 >> 操作。<figure class=\"highlight\"><div><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">istringstream</span>::<span class=\"built_in\">istringstream</span>(<span class=\"built_in\">string</span> str); <span class=\"comment\">// 构造函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">istr</span><span class=\"params\">(<span class=\"string\">\"1 56.3\"</span>)</span></span>; <span class=\"comment\">// 初始化一个 istringstream 对象</span></span><br><span class=\"line\">istr.str(<span class=\"string\">\"1100 2.3\"</span>); <span class=\"comment\">// 把字符串写入 istr 中。可以使用分界点获取不同的数据，完成字符串到其他数据类型的转换。</span></span><br><span class=\"line\">istr.str(); <span class=\"comment\">// 使 istringstream 返回一个字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 举例 把字符串转换为其他数据类型</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\"><iostream>   </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\"><sstream>   </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>{  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">istr</span><span class=\"params\">(<span class=\"string\">\"1 56.7\"</span>)</span></span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span><<istr.str()<<<span class=\"built_in\">endl</span>;<span class=\"comment\">//直接输出字符串的数据 \"1 56.7\"   </span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = istr.str();<span class=\"comment\">//函数str()返回一个字符串   </span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span><<str<<<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;  </span><br><span class=\"line\">    <span class=\"keyword\">double</span> d;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//以空格为界，把istringstream中数据取出，应进行类型转换   </span></span><br><span class=\"line\">    istr>>n;<span class=\"comment\">//第一个数为整型数据，输出1   </span></span><br><span class=\"line\">    istr>>d;<span class=\"comment\">//第二个数位浮点数，输出56.7   </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//假设换下存储类型   </span></span><br><span class=\"line\">    istr>>d;<span class=\"comment\">//istringstream第一个数要自动变成浮点型，输出仍为1   </span></span><br><span class=\"line\">    istr>>n;<span class=\"comment\">//istringstream第二个数要自动变成整型，有数字的阶段，输出为56   </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//测试输出   </span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span><<d<<<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span><<n<<<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    system(<span class=\"string\">\"pause\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></div></figure>\n\n</li>\n</ul>\n</body></html>","next":{"title":"SQL 命令学习","link":"2020/01/30/SQL-命令学习"},"plink":"http://hespoon.github.io/2020/02/01/leetcode-刷题经验/","toc":[{"title":"","id":"C-不要用局部静态变量。在多个测试用例的调用过程中，局部静态变量只会被初始化一次，导致测试用例之间的结果相互影响，出现-bug。","index":"1"},{"title":"","id":"想要所有的递归函数使用同一个变量有三种方法，全局变量，局部静态变量，参数传引用。","index":"2"},{"title":"","id":"string-转-int","index":"3"},{"title":"","id":"C-stringstream-使用","index":"4"}],"copyright":{"author":"John Doe","link":"<a href=\"http://hespoon.github.io/2020/02/01/leetcode-刷题经验/\" title=\"leetcode 刷题经验\">http://hespoon.github.io/2020/02/01/leetcode-刷题经验/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}