{"title":"文件系统","date":"2020-03-14T22:40:11.000Z","date_formatted":{"ll":"Mar 15, 2020","L":"03/15/2020","MM-DD":"03-15"},"link":"2020/03/15/文件系统","updated":"2020-03-14T22:57:49.251Z","content":"<html><head></head><body><h2 id=\"文件系统\"><a class=\"markdownIt-Anchor\" href=\"2020/03/15/文件系统#文件系统\"></a> 文件系统</h2>\n<ul>\n<li>文件目录<br>\nUNIX 的文件目录由文件名和指向文件对应的 inode 的指针组成。</li>\n<li>inode</li>\n</ul>\n<ol>\n<li>存放了文件控制文件所需要的各种基本信息。\n<ol>\n<li>文件基本信息<br>\n文件名、文件物理位置、文件的逻辑结构、文件的物理结构</li>\n<li>存取控制信息<br>\n文件存取权限</li>\n<li>使用信息<br>\n文件建立时间、修改时间等</li>\n</ol>\n</li>\n<li>还有文件用到的物理块的地址。</li>\n</ol>\n<ul>\n<li>文件的逻辑结构\n<ol>\n<li>流式文件。没有结构，将数据按顺序组织成记录并保存，以字节为单位。</li>\n<li>有结构文件。顺序文件、索引文件、索引顺序文件、散列文件</li>\n</ol>\n</li>\n<li>文件共享<br>\n基于索引节点的硬连接，利用符号链实现的软连接</li>\n<li>文件控制访问<br>\n为每个文件和目录设置一个访问控制表</li>\n<li>文件描述符、文件描述符表、打开文件表、目录项、inode 结点<br>\n每个进程在 PCB 中都有一个数组，名叫文件描述符表，文件描述符就是这个数组的下标。文件描述符 0 表示标准输入流文件，文件描述符 1 表示标准输出流文件，文件描述符 2 表示标准错误输出流文件。文件描述符的表项是一个指向系统打开文件表的指针。</li>\n<li>系统打开文件表<br>\n又叫做系统级的描述符表，表格中的各项条目称为打开文件句柄，是一个 file 对象。一个打开文件句柄存储了与一个打开文件相关的全部信息。如下所示：\n<ol>\n<li>当前文件偏移量</li>\n<li>打开文件时所使用的状态标识</li>\n<li>文件访问模式</li>\n<li>指向该文件 inode 的指针</li>\n<li>文件类型和访问权限</li>\n<li>一个指向该文件持有的锁列表的指针</li>\n<li>文件的各种属性，包括文件大小以及不同类型操作相关的时间戳</li>\n<li>该文件的引用计数，就是指向该表项的文件描述符的个数。关闭一个文件描述符会减少相应的文件的引用计数，当引用计数为零时，内核会删除该文件在系统打开文件表中的表项。</li>\n<li>一个指向 file_operations 结构体的指针，结构体的成员都是函数指针，指向实现各种文件操作的内核函数。比如：read、write、open 等函数。</li>\n<li>一个指向 dentry 结构体的指针。“dentry” 是 directory entry 的缩写。open、stat 等函数的参数是文件路径，这些函数需要通过文件路径找到文件的 inode。为了减少磁盘访问，内核缓存了目录的树状结构，称为 dentry cache。该树状结构的每一个结点就是一个 dentry 结构体。open、stat 等函数可以沿着路径各部分的 dentry 结构体搜索即可。dentry 结构体中有一个指向 inode 结构体的指针。inode 结构体保存着从磁盘上 inode 读出来的信息。如果两个 dentry 结构体指向同一个 inode 结构体，则说明这两个文件是硬连接。<br>\n系统只维护一个系统打开文件表，所有进程共享这张表。</li>\n</ol>\n</li>\n<li>虚拟文件系统<br>\nLinux 系统中存在很多物理的文件系统，比如 ext2、ext3、ext4 等。每个文件系统都有自己的文件组织方法，操作方法。Linux 系统通过虚拟文件系统使用户能够透明的处理文件，忽视不同物理文件系统之间的差异。<br>\n虚拟文件系统中有四个重要对象：超级块（super block)、索引节点（inode）、目录项（dentry）和文件对象（file）</li>\n<li>超级块（super block）<br>\n一个超级块对应一个真实的物理文件系统，保存文件系统的类型、大小、状态等元信息。不同的物理文件系统对应不同的 super_block，因此对于不同的 super_block 的操作也不同。super_block 结构体中有一个指向 super_operations 结构体的指针，指向某个特定的具体文件系统用于管理这个文件系统中 inode 的操作函数的集合。<br>\n内核中的结构处理都是有讲究的，内核单独使用一个简单的结构体将所有 super_block 都连接起来，但这个结构体不是 super_block 本身，因为 super_block 本身太大了，效率不高。<br>\nstruct file_system_type *s_type 属性：文件系统类型，也就是当前文件系统是属于哪个类型，ext2 还是 ext3。</li>\n<li>索引节点 inode<br>\n保存的是文件的元数据，就是文件属性的描述。例如：文件大小、设备标识符、用户标识符、文件模式、文件读取或修改的时间戳、指向存储文件数据的磁盘区块的指针。<br>\ninode 有两种，一种是虚拟文件系统的 inode，一种是具体文件系统的 inode。前者存在与内存中，后者存在于磁盘中。使用 inode 时，要将磁盘上的 inode 填充到内存中的 inode 中。<br>\n每个 inode 结点的大小，一般是 128B 或者 256B。inode 结点的总数在磁盘格式化时就给定。一般每 2KB 的硬盘就设置一个 inode。<br>\ninode number 是唯一的，表示不同的文件。文件名是给用户使用的，Linux 的系统文件目录的一个表项就是 “文件名 + inode number”。系统通过文件名，找到文件对应的 inode number，再通过 inode number 找到 inode 信息，最后通过 inode 中的指向磁盘块的指针，找到文件的数据。<br>\n创建一个文件时，内核就给该文件分配一个 inode，一个 inode 只对应一个实际文件，一个文件也只有一个 inode。inode 的个数就是系统中文件的最大个数。</li>\n<li>目录项（dentry）<br>\n目录项是描述文件的逻辑属性，只存在与内存中，没有实际对应的磁盘描述，是存在于内存的目录项缓存，为了提高查找性能而设计的。所有目录项在一起构成一颗庞大的目录树。<br>\n一个目录项对应一个 inode 结构，一个 inode 结构可以对应多个 dentry 结构。</li>\n<li>文件对象（file）<br>\n文件对象描述的是进程已经打开的文件。file 对象组成系统打开文件表。</li>\n</ul>\n</body></html>","prev":{"title":"计算机网络","link":"2020/03/17/计算机网络"},"next":{"title":"图算法专题","link":"2020/03/12/图算法专题"},"plink":"http://hespoon.github.io/2020/03/15/文件系统/","toc":[{"title":"","id":"文件系统","index":"1"}],"copyright":{"custom":"my copyright"}}